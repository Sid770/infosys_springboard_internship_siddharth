{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sidhe\\AppData\\Local\\Temp\\ipykernel_14404\\1427716348.py:61: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
      "  results = data.groupby(['similarity_bin', 'decision', 'role']).size().unstack(fill_value=0)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "role                     AI Engineer  Business Analyst  Cloud Architect  \\\n",
      "similarity_bin decision                                                   \n",
      "0-0.1          Reject              0                 0                0   \n",
      "               Select              0                 0                0   \n",
      "0.1-0.2        Reject              0                 0                0   \n",
      "               Select              0                 0                0   \n",
      "0.2-0.4        Reject              0                 0                0   \n",
      "               Select              0                 0                0   \n",
      "0.4-0.6        Reject              0                 0                0   \n",
      "               Select              3                 2                2   \n",
      "0.6-0.8        Reject              0                 0                0   \n",
      "               Select             10                 9                6   \n",
      "0.8-1.0        Reject              0                 0                0   \n",
      "               Select              0                 0                0   \n",
      "\n",
      "role                     Content Writer  Cybersecurity Specialist  \\\n",
      "similarity_bin decision                                             \n",
      "0-0.1          Reject                 0                         0   \n",
      "               Select                 0                         0   \n",
      "0.1-0.2        Reject                 0                         0   \n",
      "               Select                 0                         0   \n",
      "0.2-0.4        Reject                 0                         0   \n",
      "               Select                 0                         0   \n",
      "0.4-0.6        Reject                 0                         0   \n",
      "               Select                 0                         2   \n",
      "0.6-0.8        Reject                 0                         0   \n",
      "               Select                 5                         7   \n",
      "0.8-1.0        Reject                 0                         0   \n",
      "               Select                 0                         0   \n",
      "\n",
      "role                     Data Analyst  Data Engineer  Data Scientist  \\\n",
      "similarity_bin decision                                                \n",
      "0-0.1          Reject               0              0              32   \n",
      "               Select              41             48               0   \n",
      "0.1-0.2        Reject               0              0             181   \n",
      "               Select             161            176               0   \n",
      "0.2-0.4        Reject               0              0               0   \n",
      "               Select              55            180             284   \n",
      "0.4-0.6        Reject               0              0               0   \n",
      "               Select               6             96              92   \n",
      "0.6-0.8        Reject               0              0               0   \n",
      "               Select               4              9               3   \n",
      "0.8-1.0        Reject               0              0               0   \n",
      "               Select               0              0               0   \n",
      "\n",
      "role                     Database Administrator  DevOps Engineer  ...  \\\n",
      "similarity_bin decision                                           ...   \n",
      "0-0.1          Reject                         0                0  ...   \n",
      "               Select                         0                0  ...   \n",
      "0.1-0.2        Reject                         0                0  ...   \n",
      "               Select                         0                0  ...   \n",
      "0.2-0.4        Reject                         0                0  ...   \n",
      "               Select                         0                0  ...   \n",
      "0.4-0.6        Reject                         0                0  ...   \n",
      "               Select                         0               14  ...   \n",
      "0.6-0.8        Reject                         0                0  ...   \n",
      "               Select                         9                2  ...   \n",
      "0.8-1.0        Reject                         0                0  ...   \n",
      "               Select                         0                0  ...   \n",
      "\n",
      "role                     Mobile App Developer  Network Engineer  \\\n",
      "similarity_bin decision                                           \n",
      "0-0.1          Reject                       0                 0   \n",
      "               Select                       0                 0   \n",
      "0.1-0.2        Reject                       0                 0   \n",
      "               Select                       0                 0   \n",
      "0.2-0.4        Reject                       0                 0   \n",
      "               Select                       0                 0   \n",
      "0.4-0.6        Reject                       0                 0   \n",
      "               Select                       3                 0   \n",
      "0.6-0.8        Reject                       0                 0   \n",
      "               Select                       4                15   \n",
      "0.8-1.0        Reject                       0                 0   \n",
      "               Select                       0                 1   \n",
      "\n",
      "role                     Product Manager  Project Manager  Software Developer  \\\n",
      "similarity_bin decision                                                         \n",
      "0-0.1          Reject                  0                0                   0   \n",
      "               Select                 20                1                  47   \n",
      "0.1-0.2        Reject                  0                0                   0   \n",
      "               Select                133                0                  19   \n",
      "0.2-0.4        Reject                  0                0                   0   \n",
      "               Select                221               55                   0   \n",
      "0.4-0.6        Reject                  0                0                   0   \n",
      "               Select                 74                0                   0   \n",
      "0.6-0.8        Reject                  0                0                   0   \n",
      "               Select                 66                0                   0   \n",
      "0.8-1.0        Reject                  0                0                   0   \n",
      "               Select                  0                0                   0   \n",
      "\n",
      "role                     Software Engineer  System Administrator  UI Designer  \\\n",
      "similarity_bin decision                                                         \n",
      "0-0.1          Reject                   33                     0            0   \n",
      "               Select                    0                     0           41   \n",
      "0.1-0.2        Reject                  189                     0            0   \n",
      "               Select                    0                     0          132   \n",
      "0.2-0.4        Reject                  233                     0            0   \n",
      "               Select                    0                     0           61   \n",
      "0.4-0.6        Reject                    0                     0            0   \n",
      "               Select                   96                     5            0   \n",
      "0.6-0.8        Reject                    0                     0            0   \n",
      "               Select                    0                     0            0   \n",
      "0.8-1.0        Reject                    0                     0            0   \n",
      "               Select                    0                     0            0   \n",
      "\n",
      "role                     UI Engineer  UI/UX Designer  \n",
      "similarity_bin decision                               \n",
      "0-0.1          Reject              0               0  \n",
      "               Select              0               0  \n",
      "0.1-0.2        Reject              0               0  \n",
      "               Select              5               0  \n",
      "0.2-0.4        Reject              0               0  \n",
      "               Select            152               0  \n",
      "0.4-0.6        Reject              0               0  \n",
      "               Select            127               3  \n",
      "0.6-0.8        Reject              0               0  \n",
      "               Select              7               4  \n",
      "0.8-1.0        Reject              0               0  \n",
      "               Select              0               0  \n",
      "\n",
      "[12 rows x 25 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import pickle\n",
    "import smtplib\n",
    "from email.mime.text import MIMEText\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "from email.mime.base import MIMEBase\n",
    "from email import encoders\n",
    "import os\n",
    "\n",
    "# Step 1: Load data\n",
    "data_path = \"B:\\OneDrive - Amity University\\Desktop\\Intern\\Infosys\\Assignment-6\\glove_word2vec_embss_bert_embedss_EDA_dataset.xlsx\"  # Update this to your file path\n",
    "data = pd.read_excel(data_path)\n",
    "\n",
    "\n",
    "\n",
    "# Step 3: TF-IDF Vectorization\n",
    "vectorizer = TfidfVectorizer()\n",
    "data['Job Description'] = data['job_description'].fillna('')\n",
    "data['Resume'] = data['resume'].fillna('')\n",
    "\n",
    "job_desc_vectors = vectorizer.fit_transform(data['Job Description'])\n",
    "resume_vectors = vectorizer.transform(data['Resume'])\n",
    "\n",
    "# Save the vectorizer\n",
    "with open('tfidf_vectorizer.pkl', 'wb') as f:\n",
    "    pickle.dump(vectorizer, f)\n",
    "\n",
    "# Step 4: Calculate similarity scores\n",
    "data['resume_job_similarity'] = [\n",
    "    cosine_similarity(resume_vectors[i], job_desc_vectors[i])[0][0]\n",
    "    for i in range(len(data))\n",
    "]\n",
    "\n",
    "# Step 5: Define thresholds based on roles\n",
    "role_thresholds = {\n",
    "    'software engineer': 0.4,\n",
    "    'data scientist': 0.2,\n",
    "    'ui engineer': 0.0,  # No threshold for UI Engineer\n",
    "    'Data Engineer': 0.3,\n",
    "    'Product Manager': 0.35\n",
    "}\n",
    "\n",
    "# Apply thresholds to make decisions\n",
    "def decide(row):\n",
    "    threshold = role_thresholds.get(row['role'].lower(), 0.0)\n",
    "    return 'Select' if row['resume_job_similarity'] >= threshold else 'Reject'\n",
    "\n",
    "data['decision'] = data.apply(decide, axis=1)\n",
    "\n",
    "# Step 6: Categorize similarity into bins\n",
    "bins = [0, 0.1, 0.2, 0.4, 0.6, 0.8, 1.0]\n",
    "labels = ['0-0.1', '0.1-0.2', '0.2-0.4', '0.4-0.6', '0.6-0.8', '0.8-1.0']\n",
    "data['similarity_bin'] = pd.cut(data['resume_job_similarity'], bins=bins, labels=labels, include_lowest=True)\n",
    "\n",
    "# Step 7: Group and analyze results\n",
    "results = data.groupby(['similarity_bin', 'decision', 'role']).size().unstack(fill_value=0)\n",
    "print(results)\n",
    "\n",
    "# Save the results to an Excel file\n",
    "output_file = \"resume_screening_results.xlsx\"\n",
    "data.to_excel(output_file, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 27 candidates, totalling 81 fits\n",
      "[CV] END ...learning_rate=0.01, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.01, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.2s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.3s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.3s\n",
      "[CV] END ..learning_rate=0.01, max_depth=5, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.01, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.01, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.2s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   0.3s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   0.3s\n",
      "[CV] END ..learning_rate=0.01, max_depth=7, n_estimators=200; total time=   0.3s\n",
      "[CV] END ....learning_rate=0.1, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ....learning_rate=0.1, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.2s\n",
      "[CV] END ....learning_rate=0.1, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.1, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "[CV] END ...learning_rate=0.1, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "[CV] END ....learning_rate=0.2, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=3, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.1s\n",
      "[CV] END ....learning_rate=0.2, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=5, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.2s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.1s\n",
      "[CV] END ....learning_rate=0.2, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ....learning_rate=0.2, max_depth=7, n_estimators=50; total time=   0.0s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=100; total time=   0.1s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "[CV] END ...learning_rate=0.2, max_depth=7, n_estimators=200; total time=   0.2s\n",
      "Accuracy: 0.76\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.56      0.06      0.11       155\n",
      "           1       0.77      0.99      0.86       495\n",
      "\n",
      "    accuracy                           0.76       650\n",
      "   macro avg       0.67      0.52      0.48       650\n",
      "weighted avg       0.72      0.76      0.68       650\n",
      "\n",
      "Training completed successfully!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "import xgboost as xgb\n",
    "import pickle\n",
    "\n",
    "# Load dataset\n",
    "data = pd.read_excel(r'B:\\OneDrive - Amity University\\Desktop\\Intern\\Infosys\\Assignment-6\\resume_screening_results.xlsx')  # Replace with your training file\n",
    "\n",
    "# Step 1: Preprocessing\n",
    "def preprocess_text(text):\n",
    "    text = text.lower()\n",
    "    text = text.replace('\\n', ' ').replace('\\r', '')\n",
    "    return text\n",
    "\n",
    "data['Resume'] = data['resume'].apply(preprocess_text)\n",
    "data['Job Description'] = data['job_description'].apply(preprocess_text)\n",
    "data['Transcript'] = data['transcript'].apply(preprocess_text)\n",
    "\n",
    "# Step 2: TF-IDF Vectorization (make sure the vectorizer is fitted on both Resume and Job Description together)\n",
    "vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')\n",
    "\n",
    "# Fit the vectorizer on both 'Resume' and 'Job Description' to ensure they have the same number of features\n",
    "resume_vectors = vectorizer.fit_transform(data['resume'])\n",
    "job_desc_vectors = vectorizer.transform(data['job_description'])  # Notice here, using transform instead of fit_transform\n",
    "\n",
    "# You can also do the same for the Transcript column if you want to keep consistency across all features\n",
    "transcript_vectors = vectorizer.transform(data['transcript'])\n",
    "\n",
    "# Save the vectorizer for future use\n",
    "with open('tfidf_vectorizer_1.pkl', 'wb') as f:\n",
    "    pickle.dump(vectorizer, f)\n",
    "\n",
    "\n",
    "# Step 3: Feature Engineering\n",
    "data['resume_job_similarity'] = [np.dot(resume_vectors[i].toarray(), job_desc_vectors[i].toarray().T)[0][0] for i in range(len(data))]\n",
    "data['transcript_job_similarity'] = [np.dot(transcript_vectors[i].toarray(), job_desc_vectors[i].toarray().T)[0][0] for i in range(len(data))]\n",
    "\n",
    "# Combine features into a single DataFrame\n",
    "X = data[['resume_job_similarity', 'transcript_job_similarity']]\n",
    "\n",
    "# Target variable\n",
    "y = data['decision'].map({'Select': 1,'selected':1,'select':1,'reject':0,'rejected':0, 'Reject': 0})\n",
    "\n",
    "# Step 4: Train-Test Split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Step 5: Model Training\n",
    "model = xgb.XGBClassifier(random_state=42)\n",
    "\n",
    "# Hyperparameter tuning (optional)\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 5, 7],\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(model, param_grid, cv=3, scoring='accuracy', verbose=2)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Best model\n",
    "best_model = grid_search.best_estimator_\n",
    "\n",
    "# Save the model\n",
    "with open('xgboost_model.pkl', 'wb') as model_file:\n",
    "    pickle.dump(best_model, model_file)\n",
    "\n",
    "# Step 6: Evaluation\n",
    "y_pred = best_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Save feature importance\n",
    "feature_importances = best_model.feature_importances_\n",
    "feature_importance_df = pd.DataFrame({\n",
    "    'Feature': ['resume_job_similarity', 'transcript_job_similarity'],\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "feature_importance_df.to_csv('feature_importance.csv', index=False)\n",
    "\n",
    "print(\"Training completed successfully!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.76\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.48      0.19      0.28       155\n",
      "           1       0.79      0.94      0.86       495\n",
      "\n",
      "    accuracy                           0.76       650\n",
      "   macro avg       0.64      0.56      0.57       650\n",
      "weighted avg       0.72      0.76      0.72       650\n",
      "\n",
      "Feature importance saved to 'feature_importance.csv'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import xgboost as xgb\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "import pickle\n",
    "\n",
    "# Load dataset (ensure that your dataset is already cleaned and preprocessed)\n",
    "data = pd.read_excel(r'B:\\OneDrive - Amity University\\Desktop\\Intern\\Infosys\\Assignment-6\\resume_screening_results.xlsx')  # Replace with your training file\n",
    "\n",
    "# Preprocess text columns (if not already done in previous steps)\n",
    "def preprocess_text(text):\n",
    "    text = text.lower()\n",
    "    text = text.replace('\\n', ' ').replace('\\r', '')\n",
    "    return text\n",
    "\n",
    "data['Resume'] = data['resume'].apply(preprocess_text)\n",
    "data['Job Description'] = data['job_description'].apply(preprocess_text)\n",
    "data['Transcript'] = data['transcript'].apply(preprocess_text)\n",
    "\n",
    "# Load the pre-trained TF-IDF vectorizer from 'tfidf.pkl'\n",
    "with open('tfidf_vectorizer_1.pkl', 'rb') as f:\n",
    "    vectorizer = pickle.load(f)\n",
    "\n",
    "# Apply the same vectorizer to 'Resume', 'Job Description', and 'Transcript'\n",
    "resume_vectors = vectorizer.transform(data['Resume'])  # Use transform, not fit_transform\n",
    "job_desc_vectors = vectorizer.transform(data['Job Description'])\n",
    "transcript_vectors = vectorizer.transform(data['Transcript'])\n",
    "\n",
    "# Feature Engineering (similarity computation)\n",
    "data['resume_job_similarity'] = [np.dot(resume_vectors[i].toarray(), job_desc_vectors[i].toarray().T)[0][0] for i in range(len(data))]\n",
    "data['transcript_job_similarity'] = [np.dot(transcript_vectors[i].toarray(), job_desc_vectors[i].toarray().T)[0][0] for i in range(len(data))]\n",
    "\n",
    "# Combine features into a single DataFrame\n",
    "X = data[['resume_job_similarity', 'transcript_job_similarity']]\n",
    "\n",
    "# Target variable\n",
    "y = data['decision'].map({'Select': 1, 'selected': 1, 'select': 1, 'reject': 0, 'rejected': 0, 'Reject': 0})\n",
    "\n",
    "# Train-Test Split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train an XGBoost model\n",
    "model = xgb.XGBClassifier(random_state=42)\n",
    "\n",
    "# Fit the model on the training data\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Evaluation\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy:.2f}')\n",
    "print(classification_report(y_test, y_pred))\n",
    "\n",
    "# Extracting feature importances\n",
    "feature_importances = model.feature_importances_\n",
    "\n",
    "# Creating a DataFrame for feature importance\n",
    "feature_importance_df = pd.DataFrame({\n",
    "    'Feature': ['resume_job_similarity', 'transcript_job_similarity'],\n",
    "    'Importance': feature_importances\n",
    "})\n",
    "\n",
    "# Save feature importance to a CSV file\n",
    "feature_importance_df.to_csv('feature_importance.csv', index=False)\n",
    "\n",
    "print(\"Feature importance saved to 'feature_importance.csv'\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
